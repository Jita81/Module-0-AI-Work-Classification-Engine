name: AI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Only trigger on code file changes
    paths:
      - '**.py'
      - '**.js'
      - '**.ts'
      - '**.java'
      - '**.go'
      - '**.rb'
      - '**.cpp'
      - '**.c'
      - '**.cs'

# Cancel in-progress reviews when new commits are pushed
concurrency:
  group: ai-review-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ai-code-review:
    name: AI Review
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          # Fetch PR commits plus base branch for comparison
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ai-review
          
      - name: Cache Review Results
        uses: actions/cache@v3
        with:
          path: .ai_review_cache
          key: ai-review-cache-${{ github.sha }}
          restore-keys: |
            ai-review-cache-
            
      - name: Setup Integrated Quality Tools
        run: |
          # Install Python dependencies for both tools
          pip install urllib3 requests
          
          # Copy integrated quality system
          cp src/core/quality_gates/ai_code_review_enhanced.py ai_review.py
          cp src/core/quality_gates/integrated_quality_system.py quality_system.py
          chmod +x src/core/quality_gates/codetest_integration.sh
          
          # Compile Python files
          python -m py_compile ai_review.py
          python -m py_compile quality_system.py
          
      - name: Configure Git
        run: |
          # Ensure we have the base branch for comparison
          git fetch origin ${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
          
      - name: Run Integrated Quality Analysis
        id: review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
        run: |
          # Debug: Check what files are available
          echo "Current directory: $(pwd)"
          echo "Files in directory: $(ls -la)"
          
          # Debug: Check if API key is set
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "ERROR: ANTHROPIC_API_KEY is not set"
            echo "REVIEW_FAILED=2" >> $GITHUB_ENV
            exit 1
          else
            echo "✅ Anthropic API key configured (length: ${#ANTHROPIC_API_KEY})"
          fi
          
          # Detect module type from repository structure
          MODULE_TYPE="CORE"
          if [ -d "src/integration" ] || grep -q "integration" README.md 2>/dev/null; then
            MODULE_TYPE="INTEGRATION"
          elif [ -d "src/support" ] || grep -q "support" README.md 2>/dev/null; then
            MODULE_TYPE="SUPPORTING"
          elif [ -d "src/technical" ] || grep -q "technical" README.md 2>/dev/null; then
            MODULE_TYPE="TECHNICAL"
          fi
          
          echo "🔍 Running Integrated Quality Analysis (Module Type: $MODULE_TYPE)"
          
          # Run integrated quality system
          set +e  # Don't exit on error
          python quality_system.py . $MODULE_TYPE > integrated-report.md 2>&1
          INTEGRATED_EXIT_CODE=$?
          echo "REVIEW_FAILED=$INTEGRATED_EXIT_CODE" >> $GITHUB_ENV
          
          # Also run traditional AI review for compatibility
          python ai_review.py \
            --changed \
            --base-branch ${{ github.base_ref }} \
            --output json \
            --output-file ai-review-report.json \
            --threshold 75 \
            2>&1 | tee ai-review-log.txt || true
          
          # Create unified report
          echo "# 🔍 Integrated Quality Analysis Report" > review-comment.md
          echo "" >> review-comment.md
          echo "**Analysis Type**: AI Code Review + Framework Validation" >> review-comment.md
          echo "**Module Type**: $MODULE_TYPE" >> review-comment.md
          echo "**Tools Used**: [CODEREVIEW](https://github.com/Jita81/CODEREVIEW) + [CODETEST](https://github.com/Jita81/CODETEST)" >> review-comment.md
          echo "" >> review-comment.md
          
          if [ -f integrated-report.md ]; then
            cat integrated-report.md >> review-comment.md
          else
            echo "⚠️ Integrated analysis failed - see logs for details" >> review-comment.md
          fi
          
          set -e  # Re-enable exit on error
            
      - name: Post PR Comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the review comment
            let comment = '';
            try {
              comment = fs.readFileSync('review-comment.md', 'utf8');
            } catch (e) {
              comment = '❌ **AI Review Error:** Failed to generate review';
            }
            
            // Find existing comment to update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('AI Code Review Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: Set Commit Status
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let state = 'success';
            let description = 'Code review passed';
            
            // Check if review failed
            if (process.env.REVIEW_FAILED === '1') {
              state = 'failure';
              description = 'Code quality below threshold';
            } else if (process.env.REVIEW_FAILED === '2') {
              state = 'error';
              description = 'Review process failed';
            }
            
            // Try to get score from report
            try {
              const report = JSON.parse(fs.readFileSync('review-report.json', 'utf8'));
              if (report.average_score) {
                description = `Score: ${report.average_score}/100`;
                if (report.high_severity_issues > 0) {
                  description += ` (${report.high_severity_issues} critical issues)`;
                }
              }
            } catch (e) {
              // Use default description
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'AI Code Review'
            });
            
      - name: Upload Review Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-review-results-${{ github.event.pull_request.number }}
          path: |
            review-comment.md
            review-report.json
            review-log.txt
          retention-days: 30
          
      - name: Summary
        if: always()
        run: |
          if [ -f review-report.json ]; then
            echo "## AI Code Review Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Parse JSON and create summary (using Python for portability)
            python -c "
          import json
          with open('review-report.json') as f:
              report = json.load(f)
              
          if report.get('success'):
              print(f\"**Score:** {report['average_score']}/100\")
              print(f\"**Total Issues:** {report['total_issues']}\")
              print(f\"**High Severity:** {report['high_severity_issues']}\")
              print()
              
              if report['high_severity_issues'] > 0:
                  print('### Top Issues')
                  for issue in report['issues'][:5]:
                      severity = issue.get('severity', 'UNKNOWN')
                      file = issue.get('file', 'unknown')
                      message = issue.get('message', 'No description')
                      print(f\"- [{severity}] {file}: {message}\")
          else:
              print('Review failed:', report.get('error', 'Unknown error'))
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "Review did not complete successfully" >> $GITHUB_STEP_SUMMARY
          fi
          
  # Optional: Require review to pass before merge (disabled for testing)
  # enforce-quality:
  #   name: Enforce Quality Gate
  #   needs: ai-code-review
  #   runs-on: ubuntu-latest
  #   if: always()
  #   
  #   steps:
  #     - name: Check Review Status
  #       run: |
  #         if [ "${{ needs.ai-code-review.result }}" != "success" ]; then
  #           echo "❌ AI Code Review did not pass"
  #           echo "Please address the issues identified in the review before merging."
  #           exit 1
  #         fi
  #         echo "✅ AI Code Review passed"
